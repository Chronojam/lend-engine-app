{% trans_default_domain 'member_site' %}
{% extends 'member_site/themes/loader.html.twig' %}

{% block sitesKey %}

{% endblock %}

{% block body %}
    <div class="row" id="item-title">
        <div class="col-md-12">
            <div class="block-borrow">
                <a href="{{ path('public_product', {productId: product.id}) }}" class="btn btn-xs btn-danger pull-right" id="button-cancel">{% trans %}button_cancel{% endtrans %}</a>
                {% trans %}public_item.borrow_now{% endtrans %}:
            </div>
            <h2>
                {% if not product.showOnWebsite %}
                    <i class="fa fa-exclamation-circle" data-toggle="tooltip" style="color: #ff741e" title="This item is not shown to members"></i>
                {% endif %}
                {{ product.name }}
            </h2>
            {% if similarItemCount > 1 %}
                <div class="similar-items">
                    <i class="fa fa-exclamation-triangle"></i>
                    {{ similarItemCount }} {% trans %}public_item.similar_items{% endtrans %}. <a href="{{ path('public_products') }}?search={{ product.name }}&see_variations=true">{% trans %}public_item.see_all{% endtrans %}</a>.
                </div>
            {% endif %}
        </div>
    </div>

    <div id="item-core">
        {{ include('member_site/cores/item_core.html.twig') }}
    </div>

    {% if app.request.get('extend') %}

    <form method="POST" id="reserve_form" class="payment-form" action="{{ path('extend_loan', {loanRowId: app.request.get('extend')}) }}">
        <input type="hidden" name="new_return_date" id="newReturnDate">
        <input type="hidden" name="new_return_time" id="newReturnTime">
        <input type="hidden" name="new_return_site_id" id="newReturnSiteId">
        <input type="hidden" name="contactEmail" id="contactEmail" class="contact-email" value="{{ user.email }}">

        {{ include('member_site/partials/modal_extend.html.twig') }}

    {% else %}

    <form method="POST" id="reserve_form" action="{{ path('basket_add_item', {itemId: product.id}) }}">

        <input type="hidden" name="date_from" id="date_from">
        <input type="hidden" name="time_from" id="time_from">
        <input type="hidden" name="date_to" id="date_to">
        <input type="hidden" name="time_to" id="time_to">
        <input type="hidden" name="from_site" id="from_site">
        <input type="hidden" name="to_site" id="to_site">
        <input type="hidden" name="item_fee" id="total_fee">

        {{ include('member_site/partials/modal_borrow.html.twig') }}

    {% endif %}

        <div class="row">
            <div class="col-md-12">
                {% if app.request.get('extend') %}
                    <div class="alert alert-info">
                        {#Admin only#}
                        Choose a new return date.
                    </div>
                {% endif %}
                <div id="calendar"></div>
            </div>
        </div>

    </form>

    <br>
    <div class="row">
        {% for site in sites %}
            <div class="col-xs-6 col-md-4 site-id-{{ site.id }}">
                <div class="site" style="border-left: 8px solid {{ site.colour }};">
                    <div style="padding-bottom: 6px;">{{ site.name }}</div>
                    <a href="https://www.google.co.uk/maps/search/{{ site.address }},{{ site.postCode }}" target="_blank">
                        {{ site.address }} <i class="fa fa-external-link-alt" style="font-size: 0.8em"></i>
                    </a>
                </div>
            </div>
        {% endfor %}
    </div>

    {% endblock %}

{% block pagejs %}
    <script>
        $(document).ready(function() {

            var itemLoanDays = {{ itemLoanDays }};
            var maxLoanDays = {{ maxLoanDays|number_format(0) }};
            var minLoanDays = {{ minLoanDays|number_format(0) }};
            var dailyFee = {{ dailyFee|number_format(6) }};
            var itemFee = {{ itemFee|number_format(6) }};
            var fixedFeePricing = "{{ tenantInformation.fixedFeePricing }}";

            // Translations
            var text_pickup_day = "{% trans %}calendar.pickup_day{% endtrans %}";
            var text_my_booking = "{% trans %}calendar.my_booking{% endtrans %}";
            var text_on_loan    = "{% trans %}calendar.on_loan{% endtrans %}";
            var text_reserved   = "{% trans %}calendar.reserved{% endtrans %}";
            var text_clash_date = "{% trans %}calendar.text_clash_date{% endtrans %}";
            var text_return_after_pickup = "{% trans %}calendar.text_return_after_pickup{% endtrans %}";
            var alert_already_booked = "{% trans %}calendar.alert_already_booked{% endtrans %}";
            var alert_not_your_booking = "{% trans %}calendar.alert_not_your_booking{% endtrans %}";
            var alert_day_warning = "{% trans with {'itemLoanDays': itemLoanDays} %}calendar.alert_day_warning{% endtrans %}";
            var alert_max_days = "{% trans with {'maxLoanDays': maxLoanDays} %}calendar.alert_max_loan_days{% endtrans %}";
            var alert_min_days = "{% trans with {'minLoanDays': minLoanDays} %}calendar.alert_min_loan_days{% endtrans %}";

            var basketPickupTime, basketSiteFromId, basketSiteFromName;
            var page = $("#productMain");
            var borrowModal = $("#borrowModal");
            var extendModal = $("#extendModal");
            var bookings = [];
            var loanUrl = "{{ path('public_loan', {loanId: 99}) }}";

            var currentPickupTime     = moment("{{ currentPickupTime }}");
            var currentPickupSiteId   = {{ currentPickupSiteId }};
            var currentPickupSiteName = "{{ currentPickupSiteName }}";
            var changeOverTime;

            var calendarMode = '{% if app.request.get('extend') %}extend{% else %}booking{% endif %}';
            var originalReturnDate = '{{ app.request.get('from') }}';

            var sites = [];
            var activeSiteId;
            {% for site in sites %}
            sites[{{ site.id }}] = "{{ site.name }}";
            {% endfor %}
            {#activeSiteId = '{% if app.user %}{{ app.user.activeSite.id }}{% else %}{{ sites[0].id }}{% endif %}';#}
            var itemSiteId = '{{ product.inventoryLocation.site.id }}';
            var itemSiteName = sites[itemSiteId];

            // Set the pickup time and location if we already have a basket
            {% if tenantInformation.basket.loanRows is defined and tenantInformation.basket.loanRows|length > 0 %}
            basketPickupTime = moment("{{ tenantInformation.basket.loanRows|first.dueOutAt|date("Y-m-d H:i") }}");
            basketSiteFromId = {{ tenantInformation.basket.loanRows|first.siteFrom.id }};
            basketSiteFromName = '{{ tenantInformation.basket.loanRows|first.siteFrom.name }}';
            {% endif %}

            // Set up timepickers
            var timeFromPicker  = $('.show_time_from');
            var timeToPicker    = $('.show_time_to');
            var newTimeToPicker = $('.new_time_to');
            timeFromPicker.timepicker({
                'step' : 15,
                'minTime': '7:00am',
                'maxTime': '10:00pm'
            });
            timeToPicker.timepicker({
                'step' : 15,
                'minTime': '7:00am',
                'maxTime': '10:00pm'
            });
            newTimeToPicker.timepicker({
                'step' : 15,
                'minTime': '7:00am',
                'maxTime': '10:00pm'
            });

            var calendarEl = document.getElementById('calendar');
            var txt;
            var url = '{{ path('item_reservations_json', {itemId: product.id}) }}';

            var calendar = new FullCalendar.Calendar(calendarEl, {
                plugins: [ 'interaction', 'dayGrid', 'timeGrid' ],
                locale: "{{ app.request.locale }}",
                views: {
                    week: { // name of view
//                        columnHeaderFormat: 'ddd d-M'
                        // other view-specific options here
                    }
                },
                eventSources: [
                    {
                        url: url,
                        type: 'GET',
                        failure: function() {
                            alert('There was an error while fetching reservations');
                        },
                        success: function(events) {
                            bookings = events; // Save for booking validation
                        },
                        color: '#d61702',
                        textColor: 'white'
                    }
                ],
                defaultView: 'dayGridMonth',
                allDaySlot: false,
                {% if app.user and tenantInformation.setting('drag_to_book') and not app.request.get('extend') %}selectable: true,{% endif %}
                header: {
                    left:   'title',
                    center: '',
                    right:  'dayGridMonth,timeGridWeek prev,next'
                },
//                businessHours: {
//                    // (0=Sunday)
//                    dow: [ 1, 2, 3, 4, 5 ],
//                    start: '09:00',
//                    end: '17:09'
//                },
                select: function(selection) {
                    var start, end, e, endDay;
                    console.log("Dates selected from "+selection.startStr+" to "+selection.endStr);
                    if (selection.startStr.length == 10) {
                        // We're picking from the month view
                        start = moment(selection.startStr+" 09:00:00");
                        e = moment(selection.endStr);
                        e.subtract(1, "days");
                        endDay = e.format("YYYY-MM-DD");
                        end = moment(endDay+" 17:00:00");
                        console.log(endDay);
                    } else {
                        // we're picking from the week view
                        start = moment(selection.startStr);
                        end   = moment(selection.endStr);
                    }
                    setPickup(start, end, itemSiteId, itemSiteName);
                    setReturn(start, end, itemSiteId, itemSiteName);
                },
                eventClick: function(info) {
                    if (info.event.extendedProps.siteId) {
                        eventClickHandler(info.event, info.jsEvent);
                    } else {
                        goToLoan(info.event);
                    }
                },
                eventRender: function(e) {
                    var calEvent = e.event;
                    var element  = e.el;
                    var today = moment();
                    var start = moment(calEvent.start);
                    var end   = moment(calEvent.end);
                    if (start.format("YYYY-MM-DD") == today.format("YYYY-MM-DD")) {
                        currentPickupTime = start;
                        $("#buttonToday").html("Today ("+start.format("HH:mm")+")").show();
                    }
                    changeOverTime = moment(calEvent.extendedProps.changeover);
                    var start_display, end_display;
                    if (calendarMode == 'extend') {
                        start_display = "none";
                        end_display = "block";
                    } else {
                        start_display = "block";
                        end_display = "none";
                    }
                    if (calEvent.extendedProps.siteName) {
                        // It's a time slot for user selection
                        txt = '';
                        if (end.format("HHmm") == changeOverTime.format("HHmm")) {
                            // just show the opening hours as we're going end-slot to end-slot
                            txt = txt + '<div class="t_start" style="font-size: 14px; font-weight: bold; display:'+start_display+'">' + start.format("h:mm a ") + '</div>';
                            txt = txt + '<div class="t_end" style="font-size: 14px; font-weight: bold; display:'+end_display+'">' + end.format("h:mm a ") + '</div>';
                        } else {
                            txt = txt + '<div class="t_start" style="font-size: 14px; font-weight: bold; display:'+start_display+'">' + changeOverTime.format("h:mm a ") + '</div>';
                            txt = txt + '<div class="t_end" style="font-size: 14px; font-weight: bold; display:'+end_display+'">' + changeOverTime.format("h:mm a ") + '</div>';
                        }
                        txt = txt + '<div class="openinghours">' + start.format("HH:mm ")+" to "+end.format("HH:mm ") + '</div>';
                        txt = txt + '<div class="hidden-xs multi-site">'+calEvent.extendedProps.siteName+'</div>';
                        $(element).html(txt);
                    } else {
                        // booking
                        if (isAdmin == true) {
                            $(element).html(calEvent.extendedProps.statusName+'<br>'+calEvent.extendedProps.loanTo);
                        } else if (currentUserId == calEvent.extendedProps.contactId) {
                            $(element).html(text_my_booking).css('backgroundColor', '#5cb85c').css('borderColor', '#5cb85c');
                        } else if (calEvent.extendedProps.statusName == 'RESERVED') {
                            $(element).html(text_reserved);
                        } else if (calEvent.extendedProps.statusName == 'ON LOAN' || calEvent.extendedProps.statusName == 'OVERDUE') {
                            $(element).html(text_on_loan);
                        }
                    }
                },
                viewRender: function() {
                    if (basketPickupTime) {
                        // User has a basket
                        setPickup(basketPickupTime, null, basketSiteFromId, basketSiteFromName);
                    }
                },
                loading: function(bool) {
                    if (bool){
                        // loading
                    } else{
                        // loaded, render a preset pickup time
                        if (basketPickupTime) {
                            setPickup(basketPickupTime, null, basketSiteFromId, basketSiteFromName);
                        }
                    }
                }
            });
            calendar.render();

            // FUNCTIONS ::

            // Change the pick up time text and value
            borrowModal.on('selectTime', '#time_from_picker', function() {
                var t = timeFromPicker.timepicker('getTime');
                timeFromPicker.html(moment(t).format("h:mm a"));
                $("#time_from").val(moment(t).format("HH:mm"));
                calculateTotalFee();
            });

            // Change the return up time text and value
            borrowModal.on('selectTime', '#time_to_picker', function() {
                var t = timeToPicker.timepicker('getTime');
                timeToPicker.html(moment(t).format("h:mm a"));
                $("#time_to").val(moment(t).format("HH:mm"));
                calculateTotalFee();
            });

            // Change the return up time text and value when extending a loan
            extendModal.on('selectTime', '.new_time_to', function() {
                var t = newTimeToPicker.timepicker('getTime');
                newTimeToPicker.html(moment(t).format("h:mm a"));
                $("#newReturnTime").val(moment(t).format("HH:mm"));
            });

            page.on('click', '.button-borrow', function(event) {
                loadSiteOpeningTimes();
                borrowModal.modal();

                $(".t_start").show();
                $(".t_end").hide();
            });

            page.on('click', '.borrowModalCancel', function () {
                resetDates();
                borrowModal.modal('hide');
            });

            $('body').on('click', '#choosePickup', function () {
//                if (basketPickupTime) {
//                    alert("You can't change the pickup time as you have other items in your basket.");
//                    return false;
//                }
                resetDates();
                borrowModal.modal('hide');
            });

            page.on('click', '#chooseReturn', function () {
                $(".t_start").hide();
                $(".t_end").show();
            });

            borrowModal.on('click', '#buttonToday', function () {
                console.log("Setting reservation from today");
                setPickup(currentPickupTime, null, currentPickupSiteId, currentPickupSiteName);
                $("#buttonNDays").show();
            });

            extendModal.on('click', '.charge-to', function () {
                if ($(this).prop("checked") == true) {
                    $("#paymentMethodId").val(stripePaymentMethodId);
                    $("#confirmDateChange").addClass("payment-submit");
                    $("#creditCards").show();
                } else {
                    $("#paymentMethodId").val("");
                    $("#confirmDateChange").removeClass("payment-submit");
                    $("#creditCards").hide();
                }
            });

            function loadSiteOpeningTimes() {
                $("#item-core").hide();
                $(".block-borrow").fadeIn(100);
                $('html, body').animate({
                    scrollTop: $("#item-title").offset().top - 10
                }, 800);
                {% for site in sites %}
                addSiteToCal({{ site.id }}, '{{ site.colour }}');
                {% endfor %}
            }

            function resetDates() {
                $("#date_from").val('');
                $("#date_to").val('');
                $(".total_fee").html('0.00');
                $(".count_days").html('0');
                $(".date_to").html('');
                $(".site_to").html('');
                $(".date_from").html('');
                $(".site_from").html('');
            }

            function eventClickHandler(calEvent, jsEvent) {

                var start    = moment(calEvent.start);
                var eventEnd = moment(calEvent.end);

                // Get the changeover time for the clicked opening slot
                changeOverTime = moment(calEvent.extendedProps.changeover);

                var siteName = calEvent.extendedProps.siteName;
                var siteId   = calEvent.extendedProps.siteId;

                // If a slot has a changeover time, use that for the start date
                // else use the start and end times
                if (eventEnd.format("HHmm") != changeOverTime.format("HHmm")) {
                    start    = changeOverTime;
                    eventEnd = changeOverTime;
                }

                var duration, days, hours, extensionFee;

                if (calendarMode == 'extend') {
                    // Extending a loan

                    if (!validateExtensionDate(eventEnd)) {
                        return false;
                    }

                    var originalDate = moment(originalReturnDate);
                    duration = moment.duration(eventEnd.diff(originalDate));
                    days = duration.asDays();

                    // Round to nearest day
                    days = Math.round(days);

                    // UI
                    $(".new_date_to").html(eventEnd.format("dddd DD MMMM"));
                    $(".new_time_to").html(eventEnd.format("h:mm a"));
                    $(".new_return_site").html(siteName);

                    // Populate the form data
                    $("#newReturnDate").val(eventEnd.format("YYYY-MM-DD"));
                    $("#newReturnTime").val(eventEnd.format("HH:mm:00"));
                    $("#newReturnSiteId").val(siteId);
                    $(".original_return_date").html(originalDate.format("dddd DD MMMM h:mm a"));
                    $(".extend_days").html(days);

                    if (dailyFee > 0) {
                        extensionFee = dailyFee * days;
                        $("#extensionFeeAmount").val(extensionFee.toFixed(2));
                        $("#extensionFeeMessage").show();
                    }

                    extendModal.modal();

                } else {
                    // Booking or reserving
                    if ($("#date_from").val()) {

                        // Check the period is OK
                        var dateFrom = moment($("#date_from").val());
                        duration     = moment.duration(eventEnd.diff(dateFrom));
                        days         = duration.asDays();
                        hours        = duration.asHours();

                        // Round to nearest day
                        days = Math.round(days);

                        if (maxLoanDays > 0 && days > maxLoanDays && isAdmin == false) {
                            alert(alert_max_days);
                            return false;
                        }
                        if (minLoanDays > 0 && days < minLoanDays && isAdmin == false) {
                            alert(alert_min_days);
                            return false;
                        }

                        // Deal with same-day loans
                        if (days < 1) {
                            days = 1;
                        }

                        // Start may have been set to changeover time above
                        return setReturn(dateFrom, eventEnd, siteId, siteName);
                    } else {
                        setPickup(start, eventEnd, siteId, siteName);
                        borrowModal.modal();
                    }
                }
            }

            function setReturn(start, end, siteId, siteName) {
                if (!validateBookingPeriod(start, end)) {
                    return false;
                }
                // Set the return date
                $("#date_to").val(end.format("YYYY-MM-DD"));
                $("#time_to").val(end.format("HH:mm"));
                $("#to_site").val(siteId);
                $(".show_date_to").html(end.format("DD MMMM"));
                $(".show_time_to").html(end.format("h:mm a"));
                $(".site_to").html(siteName);

                borrowModal.modal();

                calculateTotalFee();

                var returnCell = $(".fc-bg").find("[data-date='"+end.format("YYYY-MM-DD")+"']");
                $(".return-day").remove();
                var text_return_day = 'Return';
                returnCell.html('<div class="label label-xs label-default return-day">'+text_return_day+'</div>');

                $("#chooseReturnButton").hide();
                $("#borrowModalConfirm").show();
            }

            function setPickup(dateTimeFrom, dateTimeTo, siteId, siteName) {

                if (!validatePickupDate(dateTimeFrom)) {
                    $("#button-borrow").remove();
                    alert(text_clash_date);
                    return false;
                }

                if (!validatePickupSite(siteId)) {
                    $("#button-borrow").remove();
                    alert("Your chosen site "+siteId+" does not exist.");
                    return false;
                }

                $(".pickup-day").remove();

                // Set the pickup date
                $("#date_from").val(dateTimeFrom.format("YYYY-MM-DD"));
                $("#time_from").val(dateTimeFrom.format("HH:mm"));
                $("#from_site").val(siteId);

                $(".show_date_from").html( dateTimeFrom.format("DD MMMM") );
                $(".show_time_from").html( dateTimeFrom.format("h:mm a") );

                $(".site_from").html(siteName);
                $("#choosePickupButton").hide();
                $("#chooseReturn").show();
                $("#chooseReturnButton").show();

                var pickupCell = $(".fc-bg").find("[data-date='"+dateTimeFrom.format("YYYY-MM-DD")+"']");
                pickupCell.html('<div class="label label-xs label-default pickup-day">'+text_pickup_day+'</div>');

                basketPickupTime = dateTimeFrom;
                basketSiteFromId = siteId;
                basketSiteFromName = siteName;

                // Set the default return day based on item loan days if user has manually chosen pickup time
                if (dateTimeTo && itemLoanDays > 1) {
                    var returnTime;
                    returnTime = moment(dateTimeFrom);
                    returnTime = returnTime.add(itemLoanDays, 'd');
                    var r = setReturn(dateTimeFrom, returnTime, siteId, siteName, itemLoanDays);
                    if (r === false) {
                        // failed validation
//                        location.reload();
                    }
                }
            }

            // We used to have this function which checked the left menu contained the site key
            // But with new theme based sites it's not always present
            function validatePickupSite(siteId) {
                var returnValue = true;
                if (!$(".site-id-"+siteId).html()) {
                    returnValue = false;
                }
                return returnValue;
            }

            function validatePickupDate(time) {
                var returnValue = true;
                $(bookings).each(function() {
                    var bookingStart = moment(this.start);
                    var bookingEnd   = moment(this.end);
                    if (bookingStart < time && bookingEnd > time) {
                        // This pickup time lies within another booking
                        console.log("validatePickupDate : pickup time lies within other booking");
                        returnValue = false;
                    }
                });
                return returnValue;
            }

            function validateBookingPeriod(start, end) {
                var bookingPeriodIsValid = true;

                // Check against other bookings
                $(bookings).each(function() {
                    var bookingStart = moment(this.start);
                    if (bookingStart > moment(start) && bookingStart < moment(end)) {
                        bookingPeriodIsValid = false;
                    }
                });

                if (bookingPeriodIsValid == false) {
                    console.log("validateBookingPeriod : booking within other booking");
                    alert(text_clash_date);
                    return false;
                }

                if (moment(end) < moment(start)) {
                    alert(text_return_after_pickup+" ("+start.format("DD MMMM h:mm a")+")");
                    return false;
                }

                return true;
            }

            function validateExtensionDate(newDate) {
                var returnValue = true;
                var o = moment(originalReturnDate);
                var n = moment(newDate);
                $(bookings).each(function() {
                    var bookingStart = moment(this.start);
                    if (bookingStart > o && bookingStart < n) {
                        // This booking lies between the old and new dates
                        alert(alert_already_booked);
                        returnValue = false;
                    }
                });
                return returnValue;
            }

            function goToLoan(calEvent) {
                if (currentUserId != calEvent.extendedProps.contactId && isAdmin == false) {
                    alert(alert_not_your_booking);
                    return false;
                }
                var loanId   = calEvent.extendedProps.loanId;
                loanUrl = loanUrl.replace("99", loanId);
                document.location.href = loanUrl;
            }

            var accountBalance = {{ contactBalance }};

            function calculateTotalFee() {
                var start = moment($("#date_from").val()+" "+$("#time_from").val());
                var end   = moment($("#date_to").val()+" "+$("#time_to").val());
                var duration   = moment.duration(end.diff(start));
                var days       = duration.asDays();
                var hours      = duration.asHours();
                var totalFee;

                // Round to nearest day
                days = Math.round(days);

                if (fixedFeePricing == 1) {
                    totalFee = itemFee;
                } else {
                    totalFee = dailyFee * days;
                }

                if (totalFee > accountBalance) {
                    $(".credit-warning").show();
                } else {
                    $(".credit-warning").hide();
                }
                $(".total_fee").html(totalFee.toFixed(2));
                $("#total_fee").val(totalFee.toFixed(2)); // form input

                if (days < 1) {
                    $(".count_days").html(hours+" {% transchoice 2 %}hours{% endtranschoice %}");
                } else {
                    $(".count_days").html(days+" {% transchoice 2 %}days{% endtranschoice %}");
                }
            }

            function addSiteToCal(siteId, colour) {
                var url = '{{ path('site_data') }}?site='+siteId+"&itemId={{ product.id }}";
                calendar.addEventSource( {
                    url: url,
                    type: 'GET',
                    failure: function() {
                        alert('There was an error while fetching events!');
                    },
                    color: colour,
                    textColor: 'black',
                    className: 'siteOpening'
                });
            }

            // EXTENDING A LOAN
            {% if app.request.get('extend') %}
            loadSiteOpeningTimes();
            var pickupCell = $(".fc-bg").find("[data-date='{{ app.request.get("from")|slice(0,10) }}']");
            pickupCell.css('backgroundColor', '#d9edf7');
            pickupCell.html('<div style="padding: 5px; font-size: 10px;">Due back</div>');
            {% endif %}

        });
    </script>
{% endblock %}